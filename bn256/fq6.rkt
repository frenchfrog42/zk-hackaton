#lang racket

(require "../compilation.rkt")
(require "util.rkt")
(require "fq2.rkt")

;; utils

(define (one-args-6 name-subfunction list-args1 list-res)
    (let* ((a1 (lambda (x) (list-ref list-args1 x)))
          (a3 (lambda (x) (list-ref list-res x)))
          (ap (lambda (a b e f) (apply name-subfunction (a1 a) (a1 b) (a3 e) (a3 f) '()))))
    (append
        (ap 0 1 0 1)
        (ap 2 3 2 3)
        (ap 4 5 4 5))))
(define (two-args-6 name-subfunction list-args1 list-args2 list-res)
    (let* ((a1 (lambda (x) (list-ref list-args1 x)))
          (a2 (lambda (x) (list-ref list-args2 x)))
          (a3 (lambda (x) (list-ref list-res x)))
          (ap (lambda (a b c d e f) (apply name-subfunction (a1 a) (a1 b) (a2 c) (a2 d) (a3 e) (a3 f) '()))))
    (append
        (ap 0 1 0 1 0 1)
        (ap 2 3 2 3 2 3)
        (ap 4 5 4 5 4 5))))

;; functions

(define (mulFQ6 nxx_ nxy_ nyx_ nyy_ nzx_ nzy_ mxx_ mxy_ myx_ myy_ mzx_ mzy_ resxx resxy resyx resyy reszx reszy)
   ; (let* ((ht '())
       ;    (cp (lambda (x)
       ;         (let ((res (copy-if-destroy x))) (unless (eq? '() res) (println res))))) ;;(set! ht (cons res ht))))))
       ;    (final (lambda (x) (collect-if-destroy x ht))))
       (let ((nxx (if (list? nxx_) (second nxx_) nxx_))
             (nxy (if (list? nxy_) (second nxy_) nxy_))
             (nyx (if (list? nyx_) (second nyx_) nyx_))
             (nyy (if (list? nyy_) (second nyy_) nyy_))
             (nzx (if (list? nzx_) (second nzx_) nzx_))
             (nzy (if (list? nzy_) (second nzy_) nzy_))
             (mxx (if (list? mxx_) (second mxx_) mxx_))
             (mxy (if (list? mxy_) (second mxy_) mxy_))
             (myx (if (list? myx_) (second myx_) myx_))
             (myy (if (list? myy_) (second myy_) myy_))
             (mzx (if (list? mzx_) (second mzx_) mzx_))
             (mzy (if (list? mzy_) (second mzy_) mzy_)))
        (append
           ; (when (eq? '() (cp nxx)) nxx '()) ;;(println nxx)) ;;  (set! nxx (first ht)))
            (mulFQ2 nzx nzy mzx mzy 'v0x 'v0y)
            (mulFQ2 nyx nyy myx myy 'v1x 'v1y)
            (mulFQ2 nxx nxy mxx mxy 'v2x 'v2y)
            (addFQ2 nxx nxy nyx nyy 't0x 't0y)
            (addFQ2 mxx mxy myx myy 't1x 't1y)
            (mulFQ2drop '(destroy t0x) '(destroy t0y) '(destroy t1x) '(destroy t1y) 'tzx 'tzy)
            (subFQ2 '(destroy tzx) '(destroy tzy) 'v1x 'v1y 'tzx 'tzy)
            (subFQ2 '(destroy tzx) '(destroy tzy) 'v2x 'v2y 'tzx 'tzy)
            (mulXiFQ2 '(destroy tzx) '(destroy tzy) 'tzx 'tzy)
            (addFQ2 '(destroy tzx) '(destroy tzy) 'v0x 'v0y reszx reszy)

            (addFQ2 nyx_ nyy_ nzx nzy 't0x 't0y)
            (addFQ2 myx_ myy_ mzx mzy 't1x 't1y)
            (mulFQ2drop '(destroy t0x) '(destroy t0y) '(destroy t1x) '(destroy t1y) 'tyx 'tyy)
            (subFQ2 '(destroy tyx) '(destroy tyy) 'v0x 'v0y 'tyx 'tyy)
            (subFQ2 '(destroy tyx) '(destroy tyy) 'v1x 'v1y 'tyx 'tyy)
            (mulXiFQ2 'v2x 'v2y 't0x 't0y)
            (addFQ2 '(destroy tyx) '(destroy tyy) '(destroy t0x) '(destroy t0y) resyx resyy)

            (addFQ2 nxx_ nxy_ nzx_ nzy_ 't0x 't0y)
            (addFQ2 mxx_ mxy_ mzx_ mzy_ 't1x 't1y)
            (mulFQ2drop '(destroy t0x) '(destroy t0y) '(destroy t1x) '(destroy t1y) 'txx 'txy)
            (subFQ2 '(destroy txx) '(destroy txy) '(destroy v0x) '(destroy v0y) 'txx 'txy)
            (addFQ2 '(destroy txx) '(destroy txy) '(destroy v1x) '(destroy v1y) 'txx 'txy)
            (subFQ2 '(destroy txx) '(destroy txy) '(destroy v2x) '(destroy v2y) resxx resxy)
        )))

(define (mulFQ6-2 nxx_ nxy_ nyx_ nyy_ nzx_ nzy_ mxx_ mxy_ myx_ myy_ mzx_ mzy_ resxx resxy resyx resyy reszx reszy)
       (let ((nxx (if (list? nxx_) (second nxx_) nxx_))
             (nxy (if (list? nxy_) (second nxy_) nxy_))
             (nyx (if (list? nyx_) (second nyx_) nyx_))
             (nyy (if (list? nyy_) (second nyy_) nyy_))
             (nzx (if (list? nzx_) (second nzx_) nzx_))
             (nzy (if (list? nzy_) (second nzy_) nzy_))
             (mxx (if (list? mxx_) (second mxx_) mxx_))
             (mxy (if (list? mxy_) (second mxy_) mxy_))
             (myx (if (list? myx_) (second myx_) myx_))
             (myy (if (list? myy_) (second myy_) myy_))
             (mzx (if (list? mzx_) (second mzx_) mzx_))
             (mzy (if (list? mzy_) (second mzy_) mzy_)))
        (append
            (mulFQ2 nzx nzy mxx mxy 'v0x 'v0y)
            (mulFQ2 nyx nyy myx myy 'v1x 'v1y)
            (mulFQ2 nxx nxy mzx mzy 'v2x 'v2y)
            (addFQ2 '(destroy v0x) '(destroy v0y) '(destroy v1x) '(destroy v1y) resxx resxy)
            (addFQ2 `(destroy ,resxx) `(destroy ,resxy)  '(destroy v2x) '(destroy v2y) resxx resxy)

            (mulFQ2 nzx nzy myx myy 'v0x 'v0y)
            (mulFQ2 nyx nyy mzx mzy 'v1x 'v1y)
            (mulFQ2 nxx nxy mxx mxy 'v2x 'v2y)
            (mulXiFQ2 '(destroy v2x) '(destroy v2y) 'v2x 'v2y)
            (addFQ2 '(destroy v0x) '(destroy v0y)  '(destroy v1x) '(destroy v1y) resyx resyy)
            (addFQ2 `(destroy ,resyx) `(destroy ,resyy)  '(destroy v2x) '(destroy v2y) resyx resyy)

            (mulFQ2drop nzx_ nzy_ mzx_ mzy_ 'v0x 'v0y)
            (mulFQ2drop nyx_ nyy_ mxx_ mxy_ 'v1x 'v1y)
            (mulXiFQ2 '(destroy v1x) '(destroy v1y) 'v1x 'v1y)
            (mulFQ2drop nxx_ nxy_ myx_ myy_ 'v2x 'v2y)
            (mulXiFQ2 '(destroy v2x) '(destroy v2y) 'v2x 'v2y)
            (addFQ2 '(destroy v0x) '(destroy v0y)  '(destroy v1x) '(destroy v1y) reszx reszy)
            (addFQ2 `(destroy ,reszx) `(destroy ,reszy)  '(destroy v2x) '(destroy v2y) reszx reszy)
        )))

(define (mulFQ6-opt-zero nyx_ nyy_ nzx_ nzy_ mxx_ mxy_ myx_ myy_ mzx_ mzy_ resxx resxy resyx resyy reszx reszy)
       (let ((nyx (if (list? nyx_) (second nyx_) nyx_))
             (nyy (if (list? nyy_) (second nyy_) nyy_))
             (nzx (if (list? nzx_) (second nzx_) nzx_))
             (nzy (if (list? nzy_) (second nzy_) nzy_))
             (mxx (if (list? mxx_) (second mxx_) mxx_))
             (mxy (if (list? mxy_) (second mxy_) mxy_))
             (myx (if (list? myx_) (second myx_) myx_))
             (myy (if (list? myy_) (second myy_) myy_))
             (mzx (if (list? mzx_) (second mzx_) mzx_))
             (mzy (if (list? mzy_) (second mzy_) mzy_)))
        (append
            (mulFQ2 nzx nzy mxx mxy 'v0x 'v0y)
            (mulFQ2 nyx nyy myx myy 'v1x 'v1y)
            (addFQ2 '(destroy v0x) '(destroy v0y)  '(destroy v1x) '(destroy v1y) resxx resxy)

            (mulFQ2drop nzx nzy myx_ myy_ 'v0x 'v0y)
            (mulFQ2 nyx nyy mzx mzy 'v1x 'v1y)
            (addFQ2 '(destroy v0x) '(destroy v0y)  '(destroy v1x) '(destroy v1y) resyx resyy)

            (mulFQ2drop nzx_ nzy_ mzx_ mzy_ 'v0x 'v0y)
            (mulFQ2drop nyx_ nyy_ mxx_ mxy_ 'v1x 'v1y)
            (mulXiFQ2 '(destroy v1x) '(destroy v1y) 'v1x 'v1y)
            (addFQ2 '(destroy v0x) '(destroy v0y)  '(destroy v1x) '(destroy v1y) reszx reszy)
        )))

(define (doubleFQ6 nxx nxy nyx nyy nzx nzy a b c d e f)
    (one-args-6 doubleFQ2 (list nxx nxy nyx nyy nzx nzy) (list a b c d e f)))

(define (mulScalarFQ6 nxx nxy nyx nyy nzx nzy x y a b c d e f)
    (two-args-6 mulFQ2 (list nxx nxy nyx nyy nzx nzy) (list x y x y x y) (list a b c d e f)))

(define (addFQ6 nxx nxy nyx nyy nzx nzy mxx mxy myx myy mzx mzy a b c d e f)
    (two-args-6 addFQ2 (list nxx nxy nyx nyy nzx nzy) (list mxx mxy myx myy mzx mzy) (list a b c d e f)))

(define (subFQ6 nxx nxy nyx nyy nzx nzy mxx mxy myx myy mzx mzy a b c d e f)
    (two-args-6 subFQ2 (list nxx nxy nyx nyy nzx nzy) (list mxx mxy myx myy mzx mzy) (list a b c d e f)))

(define (negFQ6 nxx nxy nyx nyy nzx nzy a b c d e f)
    (one-args-6 negFQ2 (list nxx nxy nyx nyy nzx nzy) (list a b c d e f)))

;; Not used ?
(define (squareFQ6 nxx nxy nyx nyy nzx nzy)
    (append
        `((define resxx ,nyx))
        `((define resxy ,nyy))
        `((define resyx ,nzx))
        `((define resyy ,nzy))
        (mulXiFQ2 nxx nxy)
        `((define reszx (destroy resx)))
        `((define reszy (destroy resy)))
    ))

(define (mulTauFQ6 nxx nxy nyx nyy nzx nzy resxx resxy resyx resyy reszx reszy)
    (append
        `((define ,resxx ,nyx))
        `((define ,resxy ,nyy))
        `((define ,resyx ,nzx))
        `((define ,resyy ,nzy))
        (mulXiFQ2 nxx nxy reszx reszy)
    ))

(provide (all-defined-out))